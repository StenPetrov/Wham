{% File csFileViewModel -%}
using System;
using System.Threading.Tasks; 
using Xamarin.Forms;
using System.Collections.ObjectModel;
using System.Linq;
using System.Collections.Generic; 
using System.ComponentModel;
using XLabs.Forms.Mvvm;
using System.Windows.Input;
using {{ mobileproject | CSName }}.Models; 
using {{ mobileproject | CSName }}.Forms.Services; 
using {{ mobileproject | CSName }}.Forms.UI;

namespace {{ mobileproject | CSName }}.Forms.ViewModels{
    public partial class {{ table.TableName | ClassName }}ViewModel : ViewModel{
    
        protected {{ table.TableName | ClassName }} Model { get; private set; } 
    {% for field in table.Fields %}
		{% if field.Type != 'Ref' -%}
        // Field name: {{ field.Name }} Type: {{ field.Type }}
        {% capture fieldType %}{% SingleLine NoSpace %}
			{% if field.IsCollection == 'true' %}ObservableCollection<{% endif %}
			{% case field.Type %}
				{% when 'Ref' %}
                    {{ field.RefTable | CSName  }}
				{% else %}
                    {{ field.Type }}
			{% endcase %}
			{% if field.IsCollection == 'true' %}>{% endif %}
		 {% endSingleLine %}{% endcapture -%} 
        {% SingleLine SingleSpace -%}
        private {{ fieldType }} _{{ field.Name | CSName }} = 
        	{% if field.IsCollection == 'true' %}
                new {{ fieldType }}();
            {% else %} 
                default ({{ fieldType }});
            {% endif %}
        {% endSingleLine -%} 
        public {{ fieldType }} {{ field.Name | CSName }}  
        { 
            get{
                return _{{ field.Name | CSName }}; 
            } 
            {% if field.IsCollection != 'true' %}set{
                 SetProperty(ref  _{{ field.Name | CSName }}, value);
            }{% endif %}
        }
        {% endif -%}
    {% endfor -%}
         
    {% for field in table.Fields %}
		{% if field.Type == 'Ref' or field.IsCollection == 'true' %}
          // Field name: {{ field.Name }} Type: {{ field.Type }}
          private Command _NavigateTo{{ field.Name | CSName }}Command = null;
          public Command NavigateTo{{ field.Name | CSName }}Command {
              get{
                    return _NavigateTo{{ field.Name | CSName }}Command = _NavigateTo{{ field.Name | CSName }}Command
                        ?? new Command (async (studentId) => {
                            {% if field.Type == 'Ref' %}
                            await Navigation.PushModalAsync<{{ field.RefTable | ClassName }}ViewModel> (
                            (viewModel, page) => {
                                viewModel.Load(Model.{{ field.Name | CSName }});
                            }, animated: true);
                            {% else %}
                            // TODO: navigate to a page for a list of items
                            {% endif %}
                        });
              }
              set {
                    SetProperty (ref this._NavigateTo{{ field.Name | CSName }}Command , value);
              }
          }
        {% endif %}
    {% endfor %}
    
        public async Task<{{ table.TableName | ClassName }}> LoadFromServer(long id){
            var serverObject = await ApiClient.Instance.Get{{ table.TableName | ClassName }}(id);
            Load(serverObject);
            return serverObject;
        }
        
        public void Load({{ table.TableName | ClassName }} model){
            Model = model;
            {% for field in table.Fields %}
            {% SingleLine %}
                {% if field.Type != 'Ref' %}
                OnPropertyChanged(new PropertyChangedEventArgs("{{ field.Name | CSName }}")); 
                {% endif %}
            {% endSingleLine %}
            {% endfor %}
        }
        
        public async Task Save(bool saveToServer = false){
            {% for field in table.Fields %} 
            {% Trim %}
            {% if field.Type != 'Ref' %}
                {% if field.IsCollection == 'true' %}
            Model.{{ field.Name | CSName }}.Clear();
            Model.{{ field.Name | CSName }}.AddRange({{ field.Name | CSName }});
                {% else %} 
            Model.{{ field.Name | CSName }} = {{ field.Name | CSName }}; 
                {% endif %} 
            {% endif %}
            {% endTrim %}{% endfor %}
        }
    }
}{% endFile %}