{% File csFileViewModel -%}
using System;
using System.Threading.Tasks; 
using Xamarin.Forms;
using System.Collections.ObjectModel;
using System.Linq;
using System.Collections.Generic; 
using System.ComponentModel;
using XLabs.Forms.Mvvm;
using System.Windows.Input;
using {{ mobileproject | CSName }}.Models; 
using {{ mobileproject | CSName }}.Forms.Services; 
using {{ mobileproject | CSName }}.Forms.UI;

namespace {{ mobileproject | CSName }}.Forms.ViewModels{ 

    public partial class {{ table.TableName | ClassName }}ViewModel : BaseViewModel<{{ table.TableName | ClassName }}>{
    
        // NOTE: When a related property is changed call `OnPropertyChanged(new PropertyChangedEventArgs("ViewHeading"));` so the UI gets updated
        public override string ViewHeading {
            get{
                {% if table.Heading == '' or table.Heading == nil %}
                return "{{ table.TableName }}";
                {% else %}
                return $"{{ table.Heading }}"; 
                {% endif %}
            }
        } 
        
        // NOTE: When a related property is changed call `OnPropertyChanged(new PropertyChangedEventArgs("ViewDetails"));` so the UI gets updated 
        public override string ViewDetails {
            get{
                {% if table.Details == '' or table.Details == nil %}
                return null;
                {% else %}
                return $"{{ table.Details }}"; 
                {% endif %}
            }
        } 
        
    {% for field in table.Fields %}
		{% if field.Type != 'Ref' -%}
        // Field name: {{ field.Name }} Type: {{ field.Type }}
        {% capture fieldType %}{% SingleLine NoSpace %}
			{% if field.IsCollection == 'true' %}ObservableCollection<{% endif %}
			{% case field.Type %}
				{% when 'Ref' %}
                    {{ field.RefTable | CSName  }}
				{% else %}
                    {{ field.Type }}
			{% endcase %}
			{% if field.IsCollection == 'true' %}>{% endif %}
		 {% endSingleLine %}{% endcapture -%} 
        {% SingleLine SingleSpace -%}
        private {{ fieldType }} _{{ field.Name | CSName }} = 
        	{% if field.IsCollection == 'true' %}
                new {{ fieldType }}();
            {% else %}
                {% if field.DefaultValue != '' and field.DefaultValue != nil %}
                    {% if field.Type == 'string' %}
                     "{{ field.DefaultValue }}"; 
                    {% else %}
                     {{ field.DefaultValue }};
                    {% endif %}
                {% else %}
                {% if field.Type == 'DateTime' %}
                     DateTime.Now; 
                    {% else %} 
                    default ({{ fieldType }});
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endSingleLine -%} 
        public {{ fieldType }} {{ field.Name | CSName }}  
        { 
            get{
                return _{{ field.Name | CSName }}; 
            }  
            {% if field.IsCollection != 'true' %}set{
                if (SetProperty(ref  _{{ field.Name | CSName }}, value))
                {
                    {% AlignLines %}
                    IsChanged = true;
                    {% assign fieldName = field.Name  | CSName %}
                    {% if table.Heading contains field.Name or table.Heading contains fieldName %}
                         OnPropertyChanged(new PropertyChangedEventArgs("ViewHeading"));   
                    {% endif %}
                    {% if table.Details contains field.Name or table.Details contains fieldName %} 
                        OnPropertyChanged(new PropertyChangedEventArgs("ViewDetails"));                                          
                    {% endif %}
                    {% endAlignLines -%}                   
                }
            }{% endif %}
        }
        {% endif -%}
    {% endfor -%}
         
    {% for field in table.Fields -%}{% if field.Type == 'Ref' or field.IsCollection == 'true' %}
        // Field name: {{ field.Name }} Type: {{ field.Type }}
        private Command _NavigateTo{{ field.Name | CSName }}Command = null;
        public Command NavigateTo{{ field.Name | CSName }}Command {
            get{
                return _NavigateTo{{ field.Name | CSName }}Command = _NavigateTo{{ field.Name | CSName }}Command
                    ?? new Command (async (prm) => {
                        try{
                            {% if field.Type == 'Ref' and field.IsCollection == 'true' %}
                            if (Model!=null && Model.{{ field.Name | CSName }} == null){
                                Model.{{ field.Name | CSName }} = new List<{{ field.RefTable | ClassName }}>();
                            }
                            await Navigation.PushAsync<{{ field.RefTable | ClassName }}CollectionViewModel> (
                                (viewModel, page) => viewModel.Load(Model?.{{ field.Name | CSName }})
                                , animated: true);
                            {% else -%}
                                {% if field.Type == 'Ref' %}
                            var navRef = Model?.{{ field.Name | CSName }} ?? new {{ field.RefTable | ClassName }}();
                            bool isNew = Model?.{{ field.Name | CSName }} != navRef;
                            
                            await Navigation.PushAsync<{{ field.RefTable | ClassName }}ViewModel> (
                                (viewModel, page) => {
                                    viewModel.Load(navRef);
                                    viewModel.IsEditing = isNew;
                                    viewModel.StatusChangingCallback = (oSave, saved) => {
                                        viewModel.StatusChangingCallback = null;
                                        if (saved && Model != null){
                                            Model.{{ field.Name | CSName }} = oSave;
                                        }
                                    };
                                }, animated: true);
                                {% else %}
                            // TODO: navigate to a page for a list of items
                                {% endif %}
                            {% endif %}
                        } catch (Exception x){
                            // async commands throw exceptions into the ether, all exceptions must be handled
                            System.Diagnostics.Debug.WriteLine("{% Debrix %} Error in NavigateTo{{ field.Name | CSName }}Command: " + x);
                        }
                    });
            }
            set {
                SetProperty (ref this._NavigateTo{{ field.Name | CSName }}Command , value);
            }
        }
        {% endif %}{% endfor -%}
     
        public override async Task<{{ table.TableName | ClassName }}> LoadFromServer(long id)
        {
            var serverObject = await ApiClient.Instance.Get{{ table.TableName | ClassName }}(id);
            Load(serverObject);
            return serverObject;
        }
        
        public override void Load({{ table.TableName | ClassName }} model)
        { 
            {% AlignLines %}
            base.Load(model); 
            
            {% for field in table.Fields -%} 
                {% if field.Type != 'Ref' %}
                    {% if field.IsCollection == 'true' %}
            //TODO: copy collections and refCollections to Model
            // model.{{ field.Name | CSName }}.AddRange(Model.{{ field.Name | CSName }}.Except({{ field.Name | CSName }}));
            // model.{{ field.Name | CSName }}.Remove(x=>!{{ field.Name | CSName }}.Contains(x));
                     {% else %} 
            {{ field.Name | CSName }} = model.{{ field.Name | CSName }}; 
                    {% endif %} 
                {% endif %}
            
            {% endfor %} 
            {% endAlignLines %}
        }
        
        public override async Task Save(bool saveToServer = false)
        {
            Model = Model ?? new {{ table.TableName | ClassName }}();
            {% for field in table.Fields -%} 
            {% Trim %}
            {% if field.Type != 'Ref' %}
                {% if field.IsCollection == 'true' %}
            Model.{{ field.Name | CSName }} = Model.{{ field.Name | CSName }} ?? new List<{{ field.Type }}>();
            Model.{{ field.Name | CSName }}.Clear();
            Model.{{ field.Name | CSName }}.AddRange({{ field.Name | CSName }});
            Model.{{ field.Name | CSName }}.RemoveAll (c => !{{ field.Name | CSName }}.Contains (c));
                {% else %} 
            Model.{{ field.Name | CSName }} = {{ field.Name | CSName }}; 
                {% endif %} 
            {% endif %}
            {% endTrim %}{% endfor %}
            await base.Save(saveToServer);
        }
    }
    
    public partial class {{ table.TableName | ClassName }}CollectionViewModel : CollectionViewModel
    {
     
        protected IEnumerable<{{ table.TableName | ClassName }}> ParentCollection {get; private set;}
         
        private bool _CanEdit = false;
        public bool CanEdit 
        { 
            get{
                return _CanEdit; 
            } 
            protected set{
                AddItemCommand.ChangeCanExecute ();
                RemoveItemCommand.ChangeCanExecute();
                SetProperty(ref  _CanEdit, value);
            }
        }
        
        
        public ObservableCollection<{{ table.TableName | ClassName }}> Items { get; private set; } = new ObservableCollection<{{ table.TableName | ClassName }}>();
        
        private Command _NavigateToItemCommand = null; 
        /// <summary>
        /// The parameter for this command's .Execute must be the object to navigate to of type {{ table.TableName | ClassName }}ViewModel 
        /// or an object to add of type {{ table.TableName | ClassName }}.
        /// </summary>
        public override Command NavigateToItemCommand {
            get{
                return _NavigateToItemCommand = _NavigateToItemCommand
                    ?? new Command (async (itemPrm) => {
                        try {
                            var itemViewModel = itemPrm as {{ table.TableName | ClassName }}ViewModel;
                            var itemToAdd = itemPrm as {{ table.TableName | ClassName }};
                            if (itemViewModel!=null)
                            {
                                await Navigation.PushAsync<{{ table.TableName | ClassName }}ViewModel> (
                                    (viewModel, page) => viewModel.Load(itemViewModel.GetModel())
                                    , animated: true); 
                            } else if (itemToAdd != null) 
                            {
                                 await Navigation.PushAsync<{{ table.TableName | ClassName }}ViewModel> (
                                    (viewModel, page) => {
                                        viewModel.Load(itemToAdd);
                                        viewModel.IsPagePoppedAfterEditing = true;
                                        viewModel.IsEditing = true;
                                        viewModel.StatusChangingCallback = (oAdd, saved)=>{
                                            viewModel.StatusChangingCallback = null;
                                            if (saved)
                                                Add(oAdd);
                                        };
                                    }, animated: true); 
                            } else 
                                throw new ArgumentException("{% Debrix %} Invalid command parameter type, must be {{ table.TableName | ClassName }}ViewModel.");
                        } catch (Exception x){
                            // async commands throw exceptions into the ether, all exceptions must be handled
                            System.Diagnostics.Debug.WriteLine("{% Debrix %} Error in NavigateTo{{ field.Name | CSName }}Command: " + x);
                        }
                    });
            }
            set {
                SetProperty (ref _NavigateToItemCommand , value);
            }
        }
        
        private Command _AddItemCommand = null;
        public override Command AddItemCommand {
            get{
                return _AddItemCommand = _AddItemCommand
                    ?? new Command (async (prm) => {
                        try
                        {  
                            var newItem = new {{ table.TableName | ClassName }}();
                            if (NavigateToItemCommand.CanExecute(newItem))
                            {
                                NavigateToItemCommand.Execute(newItem);
                            } else 
                                System.Diagnostics.Debug.WriteLine("{% Debrix %} AddItemCommand not allowed to show a new item");
                        } catch (Exception x){
                            // async commands throw exceptions into the ether, all exceptions must be handled
                            System.Diagnostics.Debug.WriteLine("{% Debrix %} Error in AddItemCommand: " + x);
                        }
                    }, (prm) => CanEdit);
            }
            set {
                SetProperty (ref _AddItemCommand , value);
            }
        }
         
        private Command _RemoveItemCommand = null;
        public override Command RemoveItemCommand {
            get{
                return _RemoveItemCommand = _RemoveItemCommand
                    ?? new Command (async (itemPrm) => {
                        try
                        {   
                            var itemRemoveViewModel = itemPrm as {{ table.TableName | ClassName }}ViewModel;
                            var itemToRemove = itemPrm as {{ table.TableName | ClassName }};
                            
                            if (itemRemoveViewModel != null && itemRemoveViewModel.GetModel() != null){
                                Remove(itemRemoveViewModel.GetModel().Id);
                            } else if (itemToRemove != null){
                                 Remove(itemToRemove.Id);
                            } else 
                                System.Diagnostics.Debug.WriteLine("{% Debrix %} RemoveItemCommand needs an item to remove, got: " + itemPrm);
                        } catch (Exception x){
                            // async commands throw exceptions into the ether, all exceptions must be handled
                            System.Diagnostics.Debug.WriteLine("{% Debrix %} Error in AddItemCommand: " + x);
                        }
                    }, (prm) => CanEdit);
            }
            set {
                SetProperty (ref _RemoveItemCommand , value);
            }
        }
         
        public async Task<IEnumerable<{{ table.TableName | ClassName }}>> LoadFromServer()
        {
            var serverObjects = await ApiClient.Instance.List{{ table.TableName | ClassName }}();
            Load(serverObjects);
            return serverObjects;
        }
     
        public void Load(IEnumerable<{{ table.TableName | ClassName }}> models)
        { 
            Items.Clear(); 
            ParentCollection = models;
            CanEdit = ParentCollection is IList<{{ table.TableName | ClassName }}>;
            if (models!=null){
                foreach (var model in models){
                    Items.Add(model);
                }
            }
        }
         
        public void Add({{ table.TableName | ClassName }} model)
        {
            if (CanEdit){
                Remove(model.Id);
                Items.Add(model); 
                ((IList<{{ table.TableName | ClassName }}>)ParentCollection).Add(model);
            }
        }
         
        public void Remove(long id)
        {
             if (CanEdit)
             {
                {{ table.TableName | ClassName }} existingItem = null;
                do{
                    existingItem = Items.FirstOrDefault(item=>item.Id ==id);
                    if (existingItem != null) {
                        Items.Remove (existingItem);
                        ((IList<{{ table.TableName | ClassName }}>)ParentCollection).Remove (existingItem);
                    }
                } while (existingItem!=null); 
            }
        } 
        
        public {{ table.TableName | ClassName }} Find(long id)
        {
            var existingItem = Items.FirstOrDefault(item=>item.Id == id);
            return existingItem;
        } 
    }
}
{% endFile %}