using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Web.Http;

using {{ serverproject }}.Models;

namespace {{ serverproject }}.Api.Controllers
{
    public class {{ controllerModel.TableName | ClassName }}Controller : ApiController
    {
        // dummy data store
        private static readonly ConcurrentBag<{{ controllerModel.TableName | ClassName }}> DataStore = new  ConcurrentBag<{{ controllerModel.TableName | ClassName }}> ();

        // GET: api/{{ controllerModel.TableName | ClassName }}
        public async Task<IEnumerable<{{ controllerModel.TableName | ClassName }}>> Get()
        {
            lock (DataStore){
                return DataStore.ToArray();
            }
        } 
 
        // GET: api/{{ controllerModel.TableName | ClassName }}/5
        public async Task<{{ controllerModel.TableName | ClassName }}> Get(long id)
        { 
            lock (DataStore){
                var dataObject = DataStore.FirstOrDefault(o=> o.Id == id);
                if (dataObject == null)
                    throw new HttpResponseException(HttpStatusCode.NotFound);
                return dataObject; 
            }
        }

        // POST: api/{{ controllerModel.TableName | ClassName }}
        [HttpPost]
        public async Task<{{ controllerModel.TableName | ClassName }}> Post([FromBody] {{ controllerModel.TableName | ClassName }} postObject)
        {
            lock (DataStore){
                if (postObject.Id>0)
                    throw new HttpResponseException(HttpStatusCode.BadRequest);

                postObject.Id = DataStore.Any() ? DataStore.Max(o=>o.Id) + 1 : 100; 
                    
                DataStore.Add(postObject);
                return postObject;
            }
        }
        
         // DELETE: api/{{ controllerModel.TableName | ClassName }}/5
        public async Task Delete(long id)
        {
            lock (DataStore){
                var dataObject = DataStore.FirstOrDefault(o=> o.Id == id);
                if (dataObject == null)
                    throw new HttpResponseException(HttpStatusCode.NotFound);
                dataObject.Id = -dataObject.Id; // hide the item
            }
        }
    }
}
